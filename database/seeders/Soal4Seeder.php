<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class Soal4Seeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        DB::table('soal')->insert([
            [
                'id_sesi' => 17,
                'tipe' => 'mcq',
                'soal' => 'Fungsi COUNT dalam SQL digunakan untuk:',
                'opsi' => json_encode(['Menjumlahkan semua nilai dalam kolom', 'Menghitung jumlah baris dalam tabel', 'Menampilkan data terbesar', 'Mengurutkan data']),
                'jawaban' => json_encode(['Menghitung jumlah baris dalam tabel']),
            ],
            [
                'id_sesi' => 17,
                'tipe' => 'mcq',
                'soal' => 'Bagaimana cara menghitung total harga dari tabel produk?',
                'opsi' => json_encode(['SELECT COUNT(harga) FROM produk;', 'SELECT AVG(harga) FROM produk;', 'SELECT SUM(harga) FROM produk;', 'SELECT MIN(harga) FROM produk;']),
                'jawaban' => json_encode(['SELECT SUM(harga) FROM produk;']),
            ],
            [
                'id_sesi' => 17,
                'tipe' => 'mcq',
                'soal' => 'Fungsi apa yang digunakan untuk mencari nilai tertinggi dalam kolom gaji?',
                'opsi' => json_encode(['COUNT', 'SUM', 'AVG', 'MAX']),
                'jawaban' => json_encode(['MAX']),
            ],
            [
                'id_sesi' => 17,
                'tipe' => 'mcq',
                'soal' => 'Perintah SQL untuk menghitung jumlah pelanggan dalam tabel adalah:',
                'opsi' => json_encode(['SELECT COUNT() FROM pelanggan;', 'SELECT SUM() FROM pelanggan;', 'SELECT AVG() FROM pelanggan;', 'SELECT MIN() FROM pelanggan;']),
                'jawaban' => json_encode(['SELECT COUNT() FROM pelanggan;']),
            ],
            [
                'id_sesi' => 17,
                'tipe' => 'mcq',
                'soal' => 'Fungsi AVG dalam SQL digunakan untuk:',
                'opsi' => json_encode(['Menghitung jumlah total nilai dalam kolom', 'Mencari nilai tertinggi dalam tabel', 'Menghitung nilai ratarata dalam kolom', 'Mengurutkan data dalam tabel']),
                'jawaban' => json_encode(['Menghitung nilai ratarata dalam kolom']),
            ],
            [
                'id_sesi' => 17,
                'tipe' => 'text',
                'soal' => 'Bagaimana cara mencari umur rata-rata karyawan?',
                'opsi' => null,
                'jawaban' => json_encode(['AVG(umur)']),
            ],
            [
                'id_sesi' => 17,
                'tipe' => 'text',
                'soal' => 'Bagaimana cara mencari harga tertinggi dari tabel produk?',
                'opsi' => null,
                'jawaban' => json_encode(['MAX(harga)']),
            ],
            [
                'id_sesi' => 17,
                'tipe' => 'text',
                'soal' => 'Bagaimana cara mencari gaji terendah dalam tabel karyawan?',
                'opsi' => null,
                'jawaban' => json_encode(['MIN(gaji)']),
            ],
            [
                'id_sesi' => 17,
                'tipe' => 'mcq',
                'soal' => 'Perintah SELECT SUM(harga) FROM produk; digunakan untuk mencari harga ratarata produk.',
                'opsi' => json_encode(['Benar', 'Salah']),
                'jawaban' => json_encode(['Salah']),
            ],
            [
                'id_sesi' => 17,
                'tipe' => 'mcq',
                'soal' => 'Fungsi COUNT bisa digunakan untuk menghitung jumlah baris dalam suatu tabel.',
                'opsi' => json_encode(['Benar', 'Salah']),
                'jawaban' => json_encode(['Benar']),
            ],
            [
                'id_sesi' => 18,
                'tipe' => 'mcq',
                'soal' => 'Apa fungsi utama GROUP BY dalam SQL?',
                'opsi' => json_encode(['Mengurutkan data', 'Mengelompokkan data berdasarkan kolom', 'Menghapus data duplikat', 'Menggabungkan tabel']),
                'jawaban' => json_encode(['Mengelompokkan data berdasarkan kolom']),
            ],
            [
                'id_sesi' => 18,
                'tipe' => 'mcq',
                'soal' => 'Perintah yang benar untuk menghitung jumlah produk berdasarkan kategori adalah:',
                'opsi' => json_encode(['SELECT COUNT(kategori) FROM produk;', 'SELECT kategori, COUNT() FROM produk GROUP BY kategori;', 'SELECT kategori FROM produk WHERE COUNT();', 'SELECT kategori GROUP BY produk;']),
                'jawaban' => json_encode(['SELECT kategori, COUNT() FROM produk GROUP BY kategori;']),
            ],
            [
                'id_sesi' => 18,
                'tipe' => 'mcq',
                'soal' => 'Kapan GROUP BY digunakan dalam SQL?',
                'opsi' => json_encode(['Saat mengurutkan data', 'Saat melakukan agregasi data berdasarkan kategori', 'Saat menghapus data dari tabel', 'Saat membuat tabel baru']),
                'jawaban' => json_encode(['Saat melakukan agregasi data berdasarkan kategori']),
            ],
            [
                'id_sesi' => 18,
                'tipe' => 'mcq',
                'soal' => 'Jika ingin menghitung total penjualan berdasarkan bulan, kolom mana yang digunakan dalam GROUP BY?',
                'opsi' => json_encode(['GROUP BY total_penjualan', 'GROUP BY bulan', 'GROUP BY harga', 'GROUP BY pelanggan']),
                'jawaban' => json_encode(['GROUP BY bulan']),
            ],
            [
                'id_sesi' => 18,
                'tipe' => 'mcq',
                'soal' => 'Apa yang terjadi jika kita menggunakan GROUP BY tanpa fungsi agregasi?',
                'opsi' => json_encode(['Data akan tetap dikelompokkan', 'Akan terjadi error', 'Data akan diurutkan', 'Semua baris akan ditampilkan tanpa perubahan']),
                'jawaban' => json_encode(['Akan terjadi error']),
            ],
            [
                'id_sesi' => 18,
                'tipe' => 'text',
                'soal' => 'Bagaimana cara menghitung jumlah siswa dalam setiap kelas?',
                'opsi' => null,
                'jawaban' => json_encode(['COUNT']),
            ],
            [
                'id_sesi' => 18,
                'tipe' => 'text',
                'soal' => 'Bagaimana cara menampilkan total gaji berdasarkan jabatan dalam tabel karyawan?',
                'opsi' => null,
                'jawaban' => json_encode(['SUM']),
            ],
            [
                'id_sesi' => 18,
                'tipe' => 'text',
                'soal' => 'Bagaimana cara menampilkan ratarata harga produk berdasarkan kategori?',
                'opsi' => null,
                'jawaban' => json_encode(['AVG']),
            ],
            [
                'id_sesi' => 18,
                'tipe' => 'mcq',
                'soal' => 'GROUP BY harus selalu digunakan dengan fungsi agregasi seperti COUNT, SUM, atau AVG.',
                'opsi' => json_encode(['Benar', 'Salah']),
                'jawaban' => json_encode(['Benar']),
            ],
            [
                'id_sesi' => 18,
                'tipe' => 'mcq',
                'soal' => 'Perintah SELECT kategori FROM produk GROUP BY kategori; akan menampilkan jumlah produk dalam setiap kategori.',
                'opsi' => json_encode(['Benar', 'Salah']),
                'jawaban' => json_encode(['Salah']),
            ],
            [
                'id_sesi' => 19,
                'tipe' => 'mcq',
                'soal' => 'Apa fungsi utama dari HAVING dalam SQL?',
                'opsi' => json_encode(['Mengurutkan data', 'Memfilter hasil setelah GROUP BY', 'Menghapus data dari tabel', 'Menggabungkan tabel']),
                'jawaban' => json_encode(['Memfilter hasil setelah GROUP BY']),
            ],
            [
                'id_sesi' => 19,
                'tipe' => 'mcq',
                'soal' => 'Apa yang akan terjadi jika HAVING digunakan tanpa GROUP BY?',
                'opsi' => json_encode(['Error', 'Berhasil', 'Tidak terjadi apapun', 'Menampilkan data']),
                'jawaban' => json_encode(['Error']),
            ],
            [
                'id_sesi' => 19,
                'tipe' => 'mcq',
                'soal' => 'Apa hasil dari perintah berikut! SELECT kategori, COUNT(*) FROM produk GROUP BY kategori HAVING COUNT(*) < 21;',
                'opsi' => json_encode(['Menampilkan kategori yang memiliki kurang dari 21 produk', 'Menampilkan kategori yang memiliki lebih dari 21 produk', 'Menampilkan produk yang berjumlah lebih dari 21', 'Menampilkan seluruh produk']),
                'jawaban' => json_encode(['Menampilkan kategori yang memiliki kurang dari 21 produk']),
            ],
            [
                'id_sesi' => 19,
                'tipe' => 'mcq',
                'soal' => 'Apa yang akan terjadi jika HAVING digunakan tanpa GROUP BY namun masih menggunakan Agregasi?',
                'opsi' => json_encode(['Error', 'Tetap berhasil', 'Tidak terjadi apapun', 'Menampilkan data']),
                'jawaban' => json_encode(['Tetap berhasil']),
            ],
            [
                'id_sesi' => 19,
                'tipe' => 'mcq',
                'soal' => 'Jika ingin menampilkan kategori dengan ratarata harga lebih dari 100 ribu, fungsi apa yang digunakan dalam HAVING?',
                'opsi' => json_encode(['COUNT()', 'SUM()', 'AVG()', 'MIN()']),
                'jawaban' => json_encode(['AVG()']),
            ],
            [
                'id_sesi' => 19,
                'tipe' => 'text',
                'soal' => 'Bagaimana cara menampilkan jabatan dengan rata-rata gaji lebih dari 21 juta?',
                'opsi' => null,
                'jawaban' => json_encode(['AVG', 'HAVING', 'GROUP BY']),
            ],
            [
                'id_sesi' => 19,
                'tipe' => 'text',
                'soal' => 'Bagaimana cara menampilkan pemasok dengan total transaksi lebih dari 20 kali?',
                'opsi' => null,
                'jawaban' => json_encode(['COUNT', 'HAVING']),
            ],
            [
                'id_sesi' => 19,
                'tipe' => 'mcq',
                'soal' => 'Agregasi perlu digunakan jika menggunakan HAVING tanpa GROUP BY?',
                'opsi' => json_encode(['Benar', 'Salah']),
                'jawaban' => json_encode(['Benar']),
            ],
            [
                'id_sesi' => 19,
                'tipe' => 'mcq',
                'soal' => 'HAVING dapat digunakan tanpa GROUP BY.',
                'opsi' => json_encode(['Benar', 'Salah']),
                'jawaban' => json_encode(['Salah']),
            ],
            [
                'id_sesi' => 19,
                'tipe' => 'mcq',
                'soal' => 'WHERE dan HAVING bisa digunakan dalam satu query SQL.',
                'opsi' => json_encode(['Benar', 'Salah']),
                'jawaban' => json_encode(['Benar']),
            ],
            [
                'id_sesi' => 20,
                'tipe' => 'mcq',
                'soal' => 'Apa itu subquery?',
                'opsi' => json_encode(['Ada 2 query dalam satu baris', 'Query didalam sebuah query', 'Query yang dibagi kedalam beberapa bagian', 'Beberapa query yang tergabung dalam satu baris']),
                'jawaban' => json_encode(['Query didalam sebuah query']),
            ],
            [
                'id_sesi' => 20,
                'tipe' => 'mcq',
                'soal' => 'Di mana subquery bisa digunakan?',
                'opsi' => json_encode(['FROM,WHERE,IN', 'HAVING,LIKE,SELECT', 'WHERE,HAVING,FROM', 'HAVING,FROM,DELETE']),
                'jawaban' => json_encode(['WHERE,HAVING,FROM']),
            ],
            [
                'id_sesi' => 20,
                'tipe' => 'mcq',
                'soal' => 'Manakah query yang benar untuk mencari data diatas rata-rata?',
                'opsi' => json_encode(['SELECT nama FROM produk WHERE harga > (SELECT AVG(harga) FROM produk);', 'SELECT nama FROM produk WHERE harga < (SELECT AVG(harga) FROM produk);']),
                'jawaban' => json_encode(['SELECT nama FROM produk WHERE harga > (SELECT AVG(harga) FROM produk);']),
            ],
            [
                'id_sesi' => 20,
                'tipe' => 'mcq',
                'soal' => 'Apa fungsi subquery dalam WHERE?',
                'opsi' => json_encode(['Memfilter data.', 'Menambah data', 'Menyalin data', 'Menggantikan data yang lama']),
                'jawaban' => json_encode(['Memfilter data.']),
            ],
            [
                'id_sesi' => 20,
                'tipe' => 'text',
                'soal' => 'Bagaimana menampilkan produk dengan harga tertinggi?',
                'opsi' => null,
                'jawaban' => json_encode(['SELECT', 'WHERE', 'FROM', 'MAX']),
            ],
            [
                'id_sesi' => 20,
                'tipe' => 'mcq',
                'soal' => 'Apa hasil dari query berikut? SELECT nama FROM pelanggan WHERE id IN (SELECT id_pelanggan FROM transaksi);',
                'opsi' => json_encode(['Pelanggan yang paling sering membeli', 'Pelanggan yang paling banyak membeli barang', 'Pelanggan yang pernah transaksi.', 'Pelanggan dengan pembelian paling sedikit']),
                'jawaban' => json_encode(['Pelanggan yang pernah transaksi.']),
            ],
            [
                'id_sesi' => 20,
                'tipe' => 'mcq',
                'soal' => 'Apa fungsi subquery dalam HAVING?',
                'opsi' => json_encode(['Memfilter hasil grup.', 'Membagi hasil grup', 'Menghapus hasil grup', 'Mendapat data dari grup']),
                'jawaban' => json_encode(['Memfilter hasil grup.']),
            ],
            [
                'id_sesi' => 20,
                'tipe' => 'text',
                'soal' => 'Bagaimana menampilkan karyawan dengan gaji di atas rata-rata?',
                'opsi' => null,
                'jawaban' => json_encode(['SELECT', 'WHERE', 'FROM', 'AVG']),
            ],
            [
                'id_sesi' => 20,
                'tipe' => 'mcq',
                'soal' => 'Manakah query yang benar jika ingin mencari total dengan dengan rata-rata lebih kecil?',
                'opsi' => json_encode(['SELECT nama FROM pelanggan WHERE total > (SELECT AVG(total) FROM pelanggan);', 'SELECT nama FROM pelanggan WHERE total < (SELECT AVG(total) FROM pelanggan);']),
                'jawaban' => json_encode(['SELECT nama FROM pelanggan WHERE total < (SELECT AVG(total) FROM pelanggan);']),
            ],
            [
                'id_sesi' => 20,
                'tipe' => 'mcq',
                'soal' => 'Apa kegunaan subquery dalam FROM?',
                'opsi' => json_encode(['Membuat tabel sementara.', 'Mendapatkan semua data', 'Mengambil tabel dari data yang tersedia', 'Melihat data yang ada']),
                'jawaban' => json_encode(['Membuat tabel sementara.']),
            ],
            [
                'id_sesi' => 21,
                'tipe' => 'mcq',
                'soal' => 'Apa hasil dari INNER JOIN antara dua tabel?',
                'opsi' => json_encode(['Semua data dari tabel kiri', 'Semua data dari tabel kanan', 'Hanya baris yang cocok di kedua tabel', 'Semua data dari kedua tabel']),
                'jawaban' => json_encode(['Hanya baris yang cocok di kedua tabel']),
            ],
            [
                'id_sesi' => 21,
                'tipe' => 'mcq',
                'soal' => 'LEFT JOIN akan mengembalikan?',
                'opsi' => json_encode(['Hanya data yang cocok di kedua tabel', 'Semua data dari tabel kiri dan yang cocok dari tabel kanan', 'Semua data dari tabel kanan', 'Semua data dari kedua tabel']),
                'jawaban' => json_encode(['Semua data dari tabel kiri dan yang cocok dari tabel kanan']),
            ],
            [
                'id_sesi' => 21,
                'tipe' => 'mcq',
                'soal' => 'Jika tidak ada data yang cocok di RIGHT JOIN, apa yang terjadi pada tabel kiri?',
                'opsi' => json_encode(['Dihilangkan dari hasil query', 'Diisi dengan NULL', 'Ditampilkan dengan data kosong', 'Tetap muncul seperti INNER JOIN']),
                'jawaban' => json_encode(['Diisi dengan NULL']),
            ],
            [
                'id_sesi' => 21,
                'tipe' => 'mcq',
                'soal' => 'Manakah pernyataan yang benar untuk FULL JOIN?',
                'opsi' => json_encode(['SELECT FROM…..INNER JOIN…..ON…...id =…..id;', 'SELECT FROM…..LEFT JOIN…..ON…...id =…..id;', 'SELECT FROM…..RIGHT JOIN…..ON…..id =…..id;', 'SELECT FROM…..FULL JOIN…..ON…..id =…..id;']),
                'jawaban' => json_encode(['SELECT FROM…..FULL JOIN…..ON…..id =…..id;']),
            ],
            [
                'id_sesi' => 21,
                'tipe' => 'mcq',
                'soal' => 'Jika sebuah tabel memiliki data tanpa pasangan di tabel lainnya, bagaimana cara memastikan semua data tetap ditampilkan?',
                'opsi' => json_encode(['Menggunakan INNER JOIN', 'Menggunakan LEFT JOIN atau RIGHT JOIN', 'Menggunakan hanya WHERE', 'Tidak bisa dilakukan']),
                'jawaban' => json_encode(['Menggunakan LEFT JOIN atau RIGHT JOIN']),
            ],
            [
                'id_sesi' => 21,
                'tipe' => 'text',
                'soal' => 'Apa perbedaan utama antara INNER JOIN dan LEFT JOIN?',
                'opsi' => null,
                'jawaban' => json_encode(['INNER JOIN hanya mengembalikan data yang cocok, sedangkan LEFT JOIN mengembalikan semua data dari tabel kiri dan data yang cocok dari tabel kanan.']),
            ],
            [
                'id_sesi' => 21,
                'tipe' => 'text',
                'soal' => 'Bagaimana cara menampilkan semua data dari kedua tabel meskipun tidak memiliki pasangan?',
                'opsi' => null,
                'jawaban' => json_encode(['Menggunakan FULL JOIN.']),
            ],
            [
                'id_sesi' => 21,
                'tipe' => 'text',
                'soal' => 'Jika kita ingin mengambil semua data dari tabel kanan meskipun tidak memiliki pasangan di tabel kiri, JOIN apa yang digunakan?',
                'opsi' => null,
                'jawaban' => json_encode(['RIGHT JOIN.']),
            ],
            [
                'id_sesi' => 21,
                'tipe' => 'text',
                'soal' => 'Apa yang terjadi pada kolom dari tabel yang tidak memiliki pasangan dalam hasil FULL JOIN?',
                'opsi' => null,
                'jawaban' => json_encode(['Kolom tersebut akan berisi NULL.']),
            ],
            [
                'id_sesi' => 21,
                'tipe' => 'mcq',
                'soal' => 'Apa yang dilakukan FULL JOIN?',
                'opsi' => json_encode(['Menampilkan semua data', 'Menampilkan semua tabel', 'Menampilkan data yang ada di kanan', 'Menampilkan data yang tersedia']),
                'jawaban' => json_encode(['Menampilkan semua data']),
            ],
            [
                'id_sesi' => 22,
                'tipe' => 'mcq',
                'soal' => 'Apa perbedaan utama antara UNION dan UNION ALL?',
                'opsi' => json_encode(['UNION menghapus duplikat, UNION ALL tidak', 'UNION ALL menghapus duplikat, UNION tidak', 'Keduanya menghapus duplikat', 'UNION hanya bisa menggabungkan dua tabel']),
                'jawaban' => json_encode(['UNION menghapus duplikat, UNION ALL tidak']),
            ],
            [
                'id_sesi' => 22,
                'tipe' => 'mcq',
                'soal' => 'UNION hanya dapat digunakan jika…',
                'opsi' => json_encode(['Kedua query memiliki jumlah kolom yang sama', 'Kedua tabel memiliki primary key', 'Kedua query memiliki jumlah baris yang sama', 'Kedua tabel berasal dari database yang sama']),
                'jawaban' => json_encode(['Kedua query memiliki jumlah kolom yang sama']),
            ],
            [
                'id_sesi' => 22,
                'tipe' => 'mcq',
                'soal' => 'Jika kita ingin menampilkan semua data termasuk yang duplikat, JOIN apa yang harus digunakan?',
                'opsi' => json_encode(['INNER JOIN', 'LEFT JOIN', 'UNION', 'UNION ALL']),
                'jawaban' => json_encode(['UNION ALL']),
            ],
            [
                'id_sesi' => 22,
                'tipe' => 'mcq',
                'soal' => 'Apa hasil dari UNION berikut jika tabel ‘pelanggan’ dan ‘karyawan’ memiliki nama yang sama? SELECT nama FROM pelanggan UNION SELECT nama FROM karyawan;',
                'opsi' => json_encode(['Semua nama unik dari kedua tabel', 'Semua nama, termasuk yang duplikat', 'Hanya data dari pelanggan', 'Hanya data dari karyawan']),
                'jawaban' => json_encode(['Semua nama unik dari kedua tabel']),
            ],
            [
                'id_sesi' => 22,
                'tipe' => 'mcq',
                'soal' => 'Manakah dari pernyataan berikut yang benar tentang UNION ALL?',
                'opsi' => json_encode(['UNION ALL menghapus duplikat', 'UNION ALL lebih lambat dari UNION', 'UNION ALL lebih cepat dari UNION', 'UNION ALL tidak bisa digunakan dengan lebih dari dua query']),
                'jawaban' => json_encode(['UNION ALL lebih cepat dari UNION']),
            ],
            [
                'id_sesi' => 22,
                'tipe' => 'mcq',
                'soal' => 'Jika kita ingin menggabungkan data dari dua tabel tanpa menghapus duplikat, perintah apa yang digunakan?',
                'opsi' => json_encode(['UNION', 'FULL JOIN', 'UNION ALL', 'FULL UNION']),
                'jawaban' => json_encode(['UNION ALL']),
            ],
            [
                'id_sesi' => 22,
                'tipe' => 'text',
                'soal' => 'Jika dua query digabungkan memiliki jumlah kolom yang berbeda, apakah UNION masih bisa digunakan?',
                'opsi' => null,
                'jawaban' => json_encode(['Tidak']),
            ],
            [
                'id_sesi' => 22,
                'tipe' => 'mcq',
                'soal' => 'Apa yang terjadi jika dua query dalam UNION memiliki jumlah kolom yang berbeda?',
                'opsi' => json_encode(['Error', 'Berhasil', 'Tidak terjadi apapun']),
                'jawaban' => json_encode(['Error']),
            ],
            [
                'id_sesi' => 22,
                'tipe' => 'text',
                'soal' => 'Bagaimana cara memastikan semua data unik tetap ditampilkan setelah menggabungkan dua query?',
                'opsi' => null,
                'jawaban' => json_encode(['UNION']),
            ],
            [
                'id_sesi' => 22,
                'tipe' => 'mcq',
                'soal' => 'Apa yang terjadi jika UNION digunakan tanpa ALL?',
                'opsi' => json_encode(['Hapus', 'Tambahkan', 'Kurangi']),
                'jawaban' => json_encode(['Hapus']),
            ],
        ]);
    }
}
